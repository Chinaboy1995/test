#配置
 ##用户信息
 $ git config --global user.name "John Doe"
 $ git config --global user.email johndoe@example.com
 $ git config core.ignorecase false  //对文件名大小写敏感

 ##文本编辑器
 $ git config --global core.editor emacs

 ##差异分析工具
 $ git config --global merge.tool vimdiff
 
 ##查看配置信息
 $ git config --list

 ##获取帮助
 $ git help <verb>
    $ git <verb> --help
    $ man git-<verb>
 如：$ git help config


1、克隆远程库
git clone http://git.oschina.net/iOceanPlus/XGSWebProject

在本地新建了一个版本库，默认建一个本地master分支。
用origin/master(远程跟踪分支，用户只读)表示远程库的master分支


2、分支

新建分支: git branch testing  //在当前commit对象上新建一个分支指针

当前分支：head指针指向的分支（git branch 查看所有分支，带*号的为当前分支）

切换分支：git checkout testing

新建并切换：git checkout -b testing

合并分支：git merge testing //将testing分支与当前分支合并

删除分支：git branch -d testing

3、远程操作
推送分支： git push (远程仓库名) (分支名) 如：git push origin testing 

git push origin serverfix:serverfix  //上传我本地的 serverfix 分支到远程仓库中去，仍旧称它为 serverfix 分支

git fetch origin 
//来同步远程服务器上的数据到本地该命令首先找到 origin 是哪个服务器,从上面获取你尚未拥有的数据，更新你本地的数据库，然后把 origin/master 的指针移到它最新的位置上
//并不会将远程分支同步到本地

git merge origin/serverfix //将远程分支合并到本地分支

git checkout -b serverfix origin/serverfix //切换到新建的 serverfix 本地分支，其内容同远程分支 origin/serverfix 一致



2. 远程分支重命名 (假设本地分支和远程对应分支名称相同)

a. 重命名远程分支对应的本地分支

git branch -m old-local-branch-name new-local-branch-name

b. 删除远程分支

git push origin  :old-local-branch-name

c. 上传新命名的本地分支

git push origin  new-local-branch-name: new-local-branch-name




